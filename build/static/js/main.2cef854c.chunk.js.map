{"version":3,"sources":["services/notes.js","Note.js","Notification.js","index.js"],"names":["axios","get","then","req","data","newObject","post","res","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","App","props","useState","notes","setNotes","newNotes","setNewNotes","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","noteToShow","filter","map","key","find","n","changedNote","catch","error","setTimeout","onSubmit","event","preventDefault","console","log","noteObject","length","date","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4OAkBe,EAfA,WAEb,OADYA,IAAMC,IAHJ,cAIHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAad,EAVA,SAAAC,GAEb,OADYL,IAAMM,KARJ,aAQkBD,GACrBH,MAAK,SAAAK,GAAG,OAAIA,EAAIH,SAQd,EALA,SAACI,EAAIH,GAElB,OADYL,IAAMS,IAAN,UAbE,aAaF,YAAwBD,GAAMH,GAC/BH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SCHdM,G,MAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKG,UAAY,qBAAuB,iBACtD,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,MCO3BK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,yBAAKJ,UAAU,SACZI,ICDDC,EAAM,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAEWF,mBAAS,cAFpB,mBAEdG,EAFc,KAEJC,EAFI,OAGSJ,oBAAS,GAHlB,mBAGdK,EAHc,KAGLC,EAHK,OAImBN,mBAAS,MAJ5B,mBAIdO,EAJc,KAIAC,EAJA,KAMrBC,qBAAU,WACRC,IACG9B,MAAK,SAAAK,GAAG,OAAIiB,EAASjB,QACrB,IAEL,IAiBM0B,EAAaN,EAAUJ,EAAQA,EAAMW,QAAO,SAAAvB,GAAI,OAAIA,EAAKG,aA0B/D,OACE,6BACE,qCACA,kBAAC,EAAD,CAAcK,QAASU,IACvB,4BACGI,EAAWE,KAAI,SAAAxB,GAAI,OAAI,kBAAC,EAAD,CAAMyB,IAAKzB,EAAKH,GAAIG,KAAMA,EAAMC,iBAAkB,kBArBvD,SAACJ,GACxB,IAAMG,EAAOY,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,KAAOA,KAChC+B,EAAW,2BAAO5B,GAAP,IAAaG,WAAYH,EAAKG,YAE/CkB,EAAmBxB,EAAI+B,GAAarC,MAAK,SAAAK,GACvCiB,EAASD,EAAMY,KAAI,SAAAxB,GAAI,OAAIA,EAAKH,KAAOA,EAAKG,EAAOJ,SAClDiC,OAAM,SAAAC,GACPX,EAAgB,SAAD,OACJnB,EAAKK,QADD,0CAGf0B,YAAW,WACTZ,EAAgB,QACf,QAS+ElB,CAAiBD,EAAKH,WAExG,4BAAQS,QA/BkB,WAC5BW,GAAYD,KA8BV,QAA8CA,EAAU,YAAc,OACtE,0BAAMgB,SAnDM,SAAAC,GACdA,EAAMC,iBACNC,QAAQC,MACR,IAAMC,EAAa,CACjBxC,GAAIe,EAAM0B,OAAS,EACnBjC,QAASS,EACTyB,MAAM,IAAIC,MAAOC,cACjBtC,UAAWuC,KAAKC,SAAW,IAG7BtB,EAAmBgB,GAChB9C,MAAK,SAAAK,GACJiB,EAASjB,GACTmB,EAAY,SAuCZ,2BAAO6B,MAAO9B,EAAU+B,SA7BJ,SAACZ,GACzBlB,EAAYkB,EAAMa,OAAOF,UA6BrB,4BAAQG,KAAK,UAAb,aAMRC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.2cef854c.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const req = axios.get(baseUrl)\r\n  return req.then(req => req.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const req = axios.post(baseUrl, newObject)\r\n  return req.then(res => res.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const req = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return req.then(req => req.data)\r\n}\r\n\r\nexport default {\r\n  getAll: getAll,\r\n  create: create,\r\n  update: update\r\n}","import React from 'react';\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport noteService from './services/notes';\nimport './index.css';\nimport Note from './Note';\nimport Notification from './Notification';\n\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNotes, setNewNotes] = useState('a new note')\n  const [showAll, setShowAll] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService.getAll()\n      .then(res => setNotes(res))\n    }, [])\n\n  const addNote = event => {\n    event.preventDefault()\n    console.log()\n    const noteObject = {\n      id: notes.length + 1,\n      content: newNotes,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n\n    noteService.create(noteObject)\n      .then(res => {\n        setNotes(res)\n        setNewNotes('')\n      })\n  }\n\n  const noteToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const handleImportantChange = () => {\n    setShowAll(!showAll)\n  }\n\n  const handleInputChange = (event) => {\n    setNewNotes(event.target.value)\n  }\n\n  const toggleImportance = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n\n    noteService.update(id, changedNote).then(res => {\n      setNotes(notes.map(note => note.id !== id ? note : res))\n    }).catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from the server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {noteToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportance(note.id)}/>)}\n      </ul>\n      <button onClick={handleImportantChange}>show {showAll ? 'important' : 'all'}</button>\n      <form onSubmit={addNote}>\n        <input value={newNotes} onChange={handleInputChange}/>\n        <button type='submit'>submit</button>\n      </form>\n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}