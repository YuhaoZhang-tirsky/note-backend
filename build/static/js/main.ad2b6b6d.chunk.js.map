{"version":3,"sources":["services/notes.js","services/login.js","Note.js","Notification.js","index.js"],"names":["token","getAll","axios","get","then","req","data","create","newObject","a","config","headers","Authorization","post","res","update","id","put","setToken","newToken","login","credentials","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","App","props","useState","notes","setNotes","newNotes","setNewNotes","showAll","setShowAll","errorMessage","setErrorMessage","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","loggedUserJSON","window","localStorage","getItem","JSON","parse","addNote","event","preventDefault","console","log","noteObject","date","Date","toISOString","Math","random","concat","noteToShow","filter","handleInputChange","target","value","handleLogin","loginService","setItem","stringify","setTimeout","onSubmit","type","onChange","name","clear","map","key","find","n","changedNote","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ad2b6b6d.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst baseUrl = '/api/notes'\r\n\r\nlet token = null\r\n\r\nconst setToken = newToken => {\r\n  token = `bearer ${newToken}`\r\n}\r\n\r\nconst getAll = () => {\r\n  const req = axios.get(baseUrl)\r\n  return req.then(req => req.data)\r\n}\r\n\r\nconst create = async newObject => {\r\n  const config = {\r\n    headers: {Authorization: token}\r\n  }\r\n  const res = await axios.post(baseUrl, newObject, config)\r\n  return res.data\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const req = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return req.then(req => req.data)\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  setToken\r\n}","import axios from 'axios'\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async credentials => {\r\n  const res = await axios.post(baseUrl, credentials)\r\n  return res.data\r\n}\r\n\r\nexport default { login }","import React from 'react';\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n  const label = note.important ? 'make not important' : 'make important'\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport noteService from './services/notes';\nimport loginService from './services/login'\nimport './index.css';\nimport Note from './Note';\nimport Notification from './Notification';\n\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNotes, setNewNotes] = useState('a new note')\n  const [showAll, setShowAll] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n\n  useEffect(() => {\n    noteService.getAll()\n      .then(res => setNotes(res))\n  }, [])\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedNoteappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      noteService.setToken(user.token)\n    }\n  }, [])\n\n  const addNote = event => {\n    event.preventDefault()\n    console.log()\n    const noteObject = {\n      content: newNotes,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    }\n\n    noteService.create(noteObject)\n      .then(res => {\n        setNotes(notes.concat(res))\n        setNewNotes('')\n      })\n  }\n\n  const noteToShow = showAll ? notes : notes.filter(note => note.important)\n\n  const handleImportantChange = () => {\n    setShowAll(!showAll)\n  }\n\n  const handleInputChange = (event) => {\n    setNewNotes(event.target.value)\n  }\n\n  const toggleImportance = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService.update(id, changedNote).then(res => {\n      setNotes(notes.map(note => note.id !== id ? note : res))\n    }).catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from the server`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    })\n  }\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const user = await loginService.login({\n        username, password\n      })\n\n      window.localStorage.setItem(\n        'loggedNoteappUser', JSON.stringify(user)\n      )\n      noteService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n    } catch {\n      setErrorMessage('Wrong credentials')\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n    }\n  }\n\n  const handleLogout = () => {\n    window.localStorage.clear()\n    setUser(null)\n  }\n\n  const loginForm = () => (\n    <form onSubmit={handleLogin}>\n      <div>\n        username\n          <input\n          type=\"text\"\n          value={username}\n          onChange={({ target }) => setUsername(target.value)}\n        />\n      </div>\n      <div>\n        password\n          <input\n          type=\"password\"\n          value={password}\n          onChange={({ target }) => setPassword(target.value)}\n        />\n      </div>\n      <button type=\"submit\">login</button>\n    </form>\n  )\n\n  const noteForm = () => (\n    <form onSubmit={addNote}>\n      <input value={newNotes} onChange={handleInputChange} />\n      <button type='submit'>submit</button>\n    </form>\n  )\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      {user === null ? \n      loginForm() : \n      <div>\n        <p>{user.name} logged-in <button onClick={handleLogout}>log out</button></p>\n        {noteForm()}\n      </div>\n      }\n      <ul>\n        {noteToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportance(note.id)} />)}\n      </ul>\n      <button onClick={handleImportantChange}>show {showAll ? 'important' : 'all'}</button>\n      \n    </div>\n  )\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}